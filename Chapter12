1. Write a recursive method called starString that accepts an integer as a parameter and prints to the console a string of stars (asterisks) 
that is 2n (i.e., 2 to the nth power) long. For example,
startString(0)should print * (because 2^0 == 1)
startString(1)should print ** (because 2^1 == 2)
startString(2)should print **** (because 2^2 == 4)
startString(3)should print ******** (because 2^3 == 8)
The method should throw an IllegalArgumentException if passed a value less than 0.

public static void starString(int n){
  if (n < 0) {
    throw new IllegalArgumentException;
  if (n == 0) {
    System.out.print("*");
    }
  else {
    starString(n - 1);
    starString(n - 1);
   }
   }
   
2. Write a method called writeNums that takes an integer n as a parameter and prints to the console the first n integers starting with 1 in sequential order, 
separated by commas. For example, consider the following calls:

writeNums(5);
System.out.println(): // to complete the line of output
writeNums(12);
System.out.println(): // to complete the line of output

These calls should produce the following output: 
1,2,3,4,5
1,2,3,4,5,6,7,8,9,10,11,12

Your method should throw an IllegalArgumentException if passed a value less than 1

public static void writeNums(int n) {
  if (n == 1) {
    System.out.print(1);
   }
  else {
      writeNums(n - 1);
      System.out.print("," + n);
     }
    }
    
3. Write a method called that accepts an integer n as a writeSequence that accepts an integer n as a parameter 
and prints to the console a symmetric sequence of n numbers composed of descending integers that ends in 1, 
followed by a sequence of ascending integers that begins with 1. 
The following table indicates the output that should be produced for various values of n:

Method call                                 output produced 
--------------------------------------------------------------
writeSequence(1);                            1
writeSequence(2);                            1 1 
writeSequence(3);                            2 1 2
writeSequence(4);                            2 1 1 2
writeSequence(5);                            3 2 1 2 3
writeSequence(6);                            3 2 1 1 2 3 
writeSequence(7);                            4 3 2 1 2 3 4
writeSequence(8);                            4 3 2 1 1 2 3 4 

Notice that when n is odd the sequence has a single 1 in the middle, whereas for even values it has two 1s in the middle. 
Your method should throw an IllegalArgumentException if it is passed a value less than 1.

public static void writeSequence(int n) {
  if (n == 1) {
    System.out.print(1);
    }
  else {
    System.out.print(n - 1);
    writeSequence(n - 1);
