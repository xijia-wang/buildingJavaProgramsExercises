1. Write a recursive method called starString that accepts an integer as a parameter and prints to the console a string of stars (asterisks) 
that is 2n (i.e., 2 to the nth power) long. For example,
startString(0)should print * (because 2^0 == 1)
startString(1)should print ** (because 2^1 == 2)
startString(2)should print **** (because 2^2 == 4)
startString(3)should print ******** (because 2^3 == 8)
The method should throw an IllegalArgumentException if passed a value less than 0.

public static void starString(int n){
  if (n < 0) {
    throw new IllegalArgumentException;
  if (n == 0) {
    System.out.print("*");
    }
  else {
    starString(n - 1);
    starString(n - 1);
   }
   }
   
2. Write a method called writeNums that takes an integer n as a parameter and prints to the console the first n integers starting with 1 in sequential order, 
separated by commas. For example, consider the following calls:

writeNums(5);
System.out.println(): // to complete the line of output
writeNums(12);
System.out.println(): // to complete the line of output

These calls should produce the following output: 
1,2,3,4,5
1,2,3,4,5,6,7,8,9,10,11,12

Your method should throw an IllegalArgumentException if passed a value less than 1

public static void writeNums(int n) {
  if (n == 1) {
    System.out.print(1);
   }
  else {
      writeNums(n - 1);
      System.out.print("," + n);
     }
    }
    
3. Write a method called that accepts an integer n as a writeSequence that accepts an integer n as a parameter 
and prints to the console a symmetric sequence of n numbers composed of descending integers that ends in 1, 
followed by a sequence of ascending integers that begins with 1. 
The following table indicates the output that should be produced for various values of n:

Method call                                 output produced 
--------------------------------------------------------------
writeSequence(1);                            1
writeSequence(2);                            1 1 
writeSequence(3);                            2 1 2
writeSequence(4);                            2 1 1 2
writeSequence(5);                            3 2 1 2 3
writeSequence(6);                            3 2 1 1 2 3 
writeSequence(7);                            4 3 2 1 2 3 4
writeSequence(8);                            4 3 2 1 1 2 3 4 

Notice that when n is odd the sequence has a single 1 in the middle, whereas for even values it has two 1s in the middle. 
Your method should throw an IllegalArgumentException if it is passed a value less than 1.

public static int preprocess(n){
  if (n %2 == 0) {
    return n/2;
   } else {
   return (n+1)/2;
  }
  
int m = preprocess(n)

public static void writeSequence(int n, int m) {
  if (n == 1) {
    System.out.print(1);
    }
  else {
  System.out.print(m);
  writeSequence(n-2, m-1);
  System.out.print(m);
  }
  }
    
    
    
4. Write a recursive method called doubleDigits that accepts an integer n as a parameter and returns the integer obtained by replacing every digit of n with two of that digit. 
For example, doubleDigits(348) should return 334488. The call doubleDigits(0) should return 0. Calling doubleDigits on a negative number should return the negation of 
calling doubleDigits on the corresponding positive number; for example, doubleDifits(-789) should return -778899. 

public static void doubleDigits(n){
  if (n == 0){
   return 0;
   } else if ( n < 0) {
    doubleDigits(n/10);
    System.out.print("-")
   
  else {
    doubleDigits(n/10);
    System.out.print(n%10);
    System.out.print(n%10)
  }
}


6.Write a recursive method called writeSquares that accepts an integer parameter n and prints the first n squares separated by commas, 
with the odd squares in descending order followed by the even squares in ascending order. For example, writeSquare(8) prints the following
output:

49,25,9,1,4,16,36,64

A call of writeSquare(1); prints 1. The method should throw an IllegalArgumentException if it is passed a value less than 1. 

public static writeSquare(n){

if (n == 1) {
  return 1
 }
else if (n % 2 != 0) {
System.out.print(n^2);
writeSquare(n-2);
System.out.print((n-1)^2);
} else {
writeSquare(n-1)
System.out.print(n^2);
}
}


7.
 public static void main(String[] args) {
    writeChars(5);
  }

  public static void writeChars(int n) {
    if (n % 2 == 0) {
      helperEven(n);
    } else {
      helperOdd(n);
    }
  }
  
  public static void helperEven(int n) {
    if (n == 2) {
      System.out.print("**");
    } else {
      System.out.print("<");
      helperEven(n - 2);
      System.out.print(">");
    }
  }

  public static void helperOdd(int n) {
    if (n == 2) {
      System.out.print("*");
    } else {
      System.out.print("<");
      helperOdd((n + 1) / 2);
      System.out.print(">");
    }
  }


8.
multiplyEven(int n) {
  if (n == 1) {
    return 2;
    }
  else{
  return 2 * multiplyEven(n-1) *n;
  }

9.
public static double sumTo(double n) {
    double result = 0.0;
    if (n == 0) {
      return 0.0;
    } else if (n == 1) {
      return 1.0;
    } else {
      result += sumTo(n - 1) + 1.0 / n;
    }
    return result;
  }
  
  10.
  





