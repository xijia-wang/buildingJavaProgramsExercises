1. Add the following accessor method to the class:
public int quadrant()
Returns which quadrant of the x/y plane the current object falls in. Quadrant 1 contains all points whose and values are both positive.<br />
Quadrant 2 contains all points with negative but positive . Quadrant 3 contains all points with negative and values. <br />
Quadrant 4 contains all points with positive but negative . If the point lies directly on the x and/or y axis, return 0. <br />

public int quadrant(){
  if (x == 0 || y == 0) {
    return 0;
  }
  if (x > 0 && y > 0) {
    return 1;
  }
  if (x < 0 and y > 0) {
    return 2;
  }
  if (x < 0 && y < 0) {
    return 3;
  }
  if (x > 0 && y < 0){
    return 4;
  }
}

2. Add the following mutator method to the class:
public void flip()
Negates and swaps the x/y coordinates of the point object. <br />
For example, if an object initially represents the point(5,−3), after a call of pt.flip(); the object should represent(3,−5). <br /> 
If the same object initially represents the point (4, 17), after a call pt.flip(); to the object should represent(−17,−4). <br /> 

public void flip() {
x = - x;
y = - y; 

int tmp = 0;
tmp = x;
x = y;
y = tmp;
}

3. Add the following accessor method to the class:
public int manhattanDistance(Point other)
Returns the “Manhattan distance” between the current object Point and the given other Point object. <br />  
The Manhattan distance refers to the distance between two places if one can travel between them only by moving horizontally or vertically,<br /> 
as though driving on the streets of Manhattan. In our case, the Manhattan distance is the sum of the absolute values of the differences in their coordinates; <br /> 
in other words, the difference in x plus the difference in y between the points.
public int manhattanDistance(Point other){
int x2 = other.getX();
int y2 = other.getY();

int horzDistance = Math.abs(x - x2);
int vertDistance = Math.abs(y - y2);

return horzDistance + vertDistance;

4. Add the following accessor method to the Point class:
public boolean isVertical(Point other)

Returns true if the given Point lines up vertically wit this Point, that is, if their x-cordinates are the same. 

public boolean isVertical(Point other){
  return x == other.x
  }
  
5.Add the following accessor method to the Point class:
public double slope(Point other)

Returns the slope of the line drawn between this Point and the given other. Use the formula (y2−y1)/(x2−x1) to determine the slope
between two points (x1, y1) and (x2, y2). Note that this formula fails for points with identical x-coordinates, so throw an IllegalArgumentException
in this case.

public double slope(Point other){
  if (x == other.x){
    throws new IllegalArgumentException();
    }
   
   return (other.y - y)/(other.x - x);
   }
   
   
6. Add the following accessor method to the Point class:
  public boolean is Collinear(Point p1, Point p2)
  
Returns whether this Point is collinear with the given two other Points. Points are collinear if a straight line can be drawn that connects them.
Two basic examples are three points that have the same x- or y- coordinate. 
The more general case can be determined by calculating the slope of the line between each pair of points and checking whether this slope is the same for all pairs of points. 
Use the formula (y2−y1)/(x2−x1) to determine the slope between two points (x1, y1) and (x2, y2). 
(Note that this formula fails for points with identical x- coordinates so this will have to be a special case in your code.) 
Since Java’s double type is imprecise, round all slope values to a reasonable accuracy such as four digits past the decimal point before you compare them.

public boolean is Collinear(Point p1, Point p2){
  if ((x = p1.x) || (x = p2.x) || p1.x = p2.x)){
    throws new IllegalArgumentException();
   }
  int k1 = (y - p1.y)/(x - p1.x);
  int k2 = (y - p2.y)/(x - p2.y);
  int k3 = (p1.y - p2.y)/(p1.x - p2.x);
  
  return k1==k2 && k1==k3 && k2 == k3;
  }
  
11. 
public class BankAccount {
  String name;
  double balance;
  double transactionFee;

  public void deposit(double amount) {
    balance = balance + amount;
  }

  public void withdraw(double amount) {
    if (balance >= amount + transactionFee) {
      balance = balance - (amount + transactionFee);
    }
  }
}

12.
public class BankAccount {
  String name;
  double balance;
  double transactionFee;

  public void deposit(double amount) {
    balance = balance + amount;
  }

  public void withdraw(double amount) {
    if (balance >= amount + transactionFee) {
      balance = balance - (amount + transactionFee);
    }
  }

  public String toString() {
    return name + ", $" + balance;
  }
}

13.
public class BankAccount {
  String name;
  double balance;
  double transactionFee;
  final static int TRANSACTION_FEE = 5;

  public BankAccount(String name) {
    this.name = name;
  }

  public void deposit(double amount) {
    balance = balance + amount;
  }

  public void withdraw(double amount) {
    if (balance >= amount + transactionFee) {
      balance = balance - (amount + transactionFee);
    }
  }

  public void transfer(BankAccount acct, double money) {
    if (balance < TRANSACTION_FEE) {
      return;
    }

    if (balance - TRANSACTION_FEE < money) {
      acct.deposit(balance - TRANSACTION_FEE);
      withdraw(balance);
    } else {
      acct.deposit(money);
      withdraw(money + TRANSACTION_FEE);
    }
  }

  public String toString() {
    return name + ", $" + balance;
  }
}

14.
import java.awt.Point;

public class Line {
  Point p1;
  Point p2;

  public Line(Point p1, Point p2) {
    this.p1 = p1;
    this.p2 = p2;
  }

  public Point getP1() {
    return p1;
  }

  public Point getP2() {
    return p2;
  }

  public String toString() {
    return p1.toString() + p2.toString();
  }
}

15.
import java.awt.Point;

public class Line {
  Point p1;
  Point p2;

  public Line(Point p1, Point p2) {
    this.p1 = p1;
    this.p2 = p2;
  }

  public Point getP1() {
    return p1;
  }

  public Point getP2() {
    return p2;
  }
  
  public double getSlope() {
    if(p1.x == p2.x) {
      throw new IllegalArgumentException();
    } 
    return (p1.y - p2.y)/(p1.x - p2.x);
  }

  public String toString() {
    return p1.toString() + p2.toString();
  }
}

16.
import java.awt.Point;

public class Line {
  Point p1;
  Point p2;

  public Line(Point p1, Point p2) {
    this.p1 = p1;
    this.p2 = p2;
  }

  public Line(int x1, int y1, int x2, int y2) {
    this(new Point(x1, y1), new Point(x2, y2));
  }

  public Point getP1() {
    return p1;
  }

  public Point getP2() {
    return p2;
  }

  public double getSlope() {
    if (p1.x == p2.x) {
      throw new IllegalArgumentException();
    }
    return (p1.y - p2.y) / (p1.x - p2.x);
  }

  public String toString() {
    return p1.toString() + p2.toString();
  }
}

17.
import java.awt.Point;

public class Line {
  Point p1;
  Point p2;

  public Line(Point p1, Point p2) {
    this.p1 = p1;
    this.p2 = p2;
  }

  public Line(int x1, int y1, int x2, int y2) {
    this(new Point(x1, y1), new Point(x2, y2));
  }

  public Point getP1() {
    return p1;
  }

  public Point getP2() {
    return p2;
  }

  public double getSlope() {
    if (p1.x == p2.x) {
      throw new IllegalArgumentException();
    }
    return (p1.y - p2.y) / (p1.x - p2.x);
  }
  
  public boolean isCollinear(Point p) {
    if (p1.x == p.x || p2.x == p.x || p1.x == p2.x) {
      throw new IllegalArgumentException();
    }
    double s1 = (p1.y - p.y)/(p1.x - p.x);
    double s2 = (p2.y - p.y)/(p2.y - p.y);
    
    return s1 == s2 && s1 == getSlope() && s2 == getSlope();
  }

18.

public class Rectangle {
  int x;
  int y;
  int width;
  int height;

  public Rectangle(int x, int y, int width, int height){
      this.x = x;
      this.y = y;
      
      if (width < 0 || height <0) {
        throw new IllegalArgumentException();
      }
      this.width = width;
      this.height = height;
    }
  
  
   public int getHeight() {
     return height;
   }
   
   public int width() {
     return width;
   }
   
   public int getX() {
     return x;
   }
   
   public int getY() {
     return y;
   }
   
   public String toString() {
     return "Rectangle [x=" + x + ", y=" + y + ", width=" + width + ", height=" + height;
   }
  
}

19.
import java.awt.Point;

public class Rectangle {
  int x;
  int y;
  int width;
  int height;

  public Rectangle(int x, int y, int width, int height) {
    this.x = x;
    this.y = y;

    if (width < 0 || height < 0) {
      throw new IllegalArgumentException();
    }
    this.width = width;
    this.height = height;
  }

  public Rectangle(Point p, int width, int height) {
    this(p.x, p.y, width, height);
  }

  public int getHeight() {
    return height;
  }

  public int width() {
    return width;
  }

  public int getX() {
    return x;
  }

  public int getY() {
    return y;
  }

  public String toString() {
    return "Rectangle [x=" + x + ", y=" + y + ", width=" + width + ", height=" + height;
  }

}

20.
import java.awt.Point;

public class Rectangle {
  int x;
  int y;
  int width;
  int height;

  public Rectangle(int x, int y, int width, int height) {
    this.x = x;
    this.y = y;

    if (width < 0 || height < 0) {
      throw new IllegalArgumentException();
    }
    this.width = width;
    this.height = height;
  }

  public Rectangle(Point p, int width, int height) {
    this(p.x, p.y, width, height);
  }

  public boolean contains(int x, int y) {
    int upperLeftX = this.x;
    int upperLeftY = this.y;
    int lowerLeftY = this.y - height;
    int upperRightX = this.x + width;

    return ((x > upperLeftX && x < upperRightX) && (y < upperLeftY && y > lowerLeftY));
  }

  public boolean contains(Point p) {
    int upperLeftX = this.x;
    int upperLeftY = this.y;
    int lowerLeftY = this.y - height;
    int upperRightX = this.x + width;

    return ((p.x > upperLeftX && p.x < upperRightX) && (p.y < upperLeftY && p.y > lowerLeftY));
  }

  public int getHeight() {
    return height;
  }

  public int width() {
    return width;
  }

  public int getX() {
    return x;
  }

  public int getY() {
    return y;
  }

  public String toString() {
    return "Rectangle [x=" + x + ", y=" + y + ", width=" + width + ", height=" + height;
  }

}

21.
import java.awt.Point;

public class Rectangle {
  int x;
  int y;
  int width;
  int height;

  public Rectangle(int x, int y, int width, int height) {
    this.x = x;
    this.y = y;

    if (width < 0 || height < 0) {
      throw new IllegalArgumentException();
    }
    this.width = width;
    this.height = height;
  }

  public Rectangle(Point p, int width, int height) {
    this(p.x, p.y, width, height);
  }

  public boolean contains(int x, int y) {
    int upperLeftX = this.x;
    int upperLeftY = this.y;
    int lowerLeftY = this.y - height;
    int upperRightX = this.x + width;

    return ((x > upperLeftX && x < upperRightX) && (y < upperLeftY && y > lowerLeftY));
  }

  public boolean contains(Point p) {
    int upperLeftX = this.x;
    int upperLeftY = this.y;
    int lowerLeftY = this.y - height;
    int upperRightX = this.x + width;

    return ((p.x > upperLeftX && p.x < upperRightX) && (p.y < upperLeftY && p.y > lowerLeftY));
  }

  public Rectangle union(Rectangle rect) {
    int upperLeftX = Math.min(x, rect.x);
    int upperLeftY = Math.max(y, rect.y);
    int upperRightX = Math.max((x + width), (rect.x + rect.width));
    int lowerLeftY = Math.min((y - height), (rect.y - height));
    
    return new Rectangle(upperLeftX, upperLeftY, (upperRightX - upperLeftX),(upperLeftY - lowerLeftY));
  }

  public int getHeight() {
    return height;
  }

  public int width() {
    return width;
  }

  public int getX() {
    return x;
  }

  public int getY() {
    return y;
  }

  public String toString() {
    return "Rectangle [x=" + x + ", y=" + y + ", width=" + width + ", height=" + height;
  }

}

22.
import java.awt.Point;

public class Rectangle {
  int x;
  int y;
  int width;
  int height;

  public Rectangle(int x, int y, int width, int height) {
    this.x = x;
    this.y = y;

    if (width < 0 || height < 0) {
      throw new IllegalArgumentException();
    }
    this.width = width;
    this.height = height;
  }

  public Rectangle(Point p, int width, int height) {
    this(p.x, p.y, width, height);
  }

  public boolean contains(int x, int y) {
    int upperLeftX = this.x;
    int upperLeftY = this.y;
    int lowerLeftY = this.y - height;
    int upperRightX = this.x + width;

    return ((x > upperLeftX && x < upperRightX) && (y < upperLeftY && y > lowerLeftY));
  }

  public boolean contains(Point p) {
    int upperLeftX = this.x;
    int upperLeftY = this.y;
    int lowerLeftY = this.y - height;
    int upperRightX = this.x + width;

    return ((p.x > upperLeftX && p.x < upperRightX) && (p.y < upperLeftY && p.y > lowerLeftY));
  }

  public Rectangle union(Rectangle rect) {
    int upperLeftX = Math.min(x, rect.x);
    int upperLeftY = Math.max(y, rect.y);
    int upperRightX = Math.max((x + width), (rect.x + rect.width));
    int lowerLeftY = Math.min((y - height), (rect.y - height));
    
    return new Rectangle(upperLeftX, upperLeftY, (upperRightX - upperLeftX),(upperLeftY - lowerLeftY));
  }
  
  public Rectangle intersection(Rectangle rect) {
    if (!contains(rect.x, rect.y) && !rect.contains(x,y)) {
      return new Rectangle(0,0,0,0);
    }
    int upperLeftX = Math.max(x, rect.x);
    int upperLeftY = Math.min(y, rect.y);
    int lowerLeftY = Math.max((y + height), (rect.y + rect.height));
    int upperRightX = Math.min((x + width), (rect.x + rect.width));
    
    return new Rectangle(upperLeftX, upperLeftY, (upperRightX - upperLeftX), (upperLeftY - lowerLeftY));
    
  }

  public int getHeight() {
    return height;
  }

  public int width() {
    return width;
  }

  public int getX() {
    return x;
  }

  public int getY() {
    return y;
  }

  public String toString() {
    return "Rectangle [x=" + x + ", y=" + y + ", width=" + width + ", height=" + height;
  }

}
23.
import java.awt.Point;

public class Rectangle {
  int x;
  int y;
  int width;
  int height;

  public Rectangle(int x, int y, int width, int height) {
    this.x = x;
    this.y = y;

    if (width < 0 || height < 0) {
      throw new IllegalArgumentException();
    }
    this.width = width;
    this.height = height;
  }

  public Rectangle(Point p, int width, int height) {
    this(p.x, p.y, width, height);
  }

  public boolean contains(int x, int y) {
    int upperLeftX = this.x;
    int upperLeftY = this.y;
    int lowerLeftY = this.y - height;
    int upperRightX = this.x + width;

    return ((x > upperLeftX && x < upperRightX) && (y < upperLeftY && y > lowerLeftY));
  }

  public boolean contains(Point p) {
    int upperLeftX = this.x;
    int upperLeftY = this.y;
    int lowerLeftY = this.y - height;
    int upperRightX = this.x + width;

    return ((p.x > upperLeftX && p.x < upperRightX) && (p.y < upperLeftY && p.y > lowerLeftY));
  }

  public Rectangle union(Rectangle rect) {
    int upperLeftX = Math.min(x, rect.x);
    int upperLeftY = Math.max(y, rect.y);
    int upperRightX = Math.max((x + width), (rect.x + rect.width));
    int lowerLeftY = Math.min((y - height), (rect.y - height));

    return new Rectangle(upperLeftX, upperLeftY, (upperRightX - upperLeftX),
        (upperLeftY - lowerLeftY));
  }

  public Rectangle intersection(Rectangle rect) {
    if (!contains(rect.x, rect.y) && !rect.contains(x, y)) {
      return new Rectangle(0, 0, 0, 0);
    }
    int upperLeftX = Math.max(x, rect.x);
    int upperLeftY = Math.min(y, rect.y);
    int lowerLeftY = Math.max((y + height), (rect.y + rect.height));
    int upperRightX = Math.min((x + width), (rect.x + rect.width));

    return new Rectangle(upperLeftX, upperLeftY, (upperRightX - upperLeftX),
        (upperLeftY - lowerLeftY));

  }

  public boolean contains(Rectangle rect) {
    return x < rect.x && y > rect.y && (x + width) > (rect.x + rect.width)
        && (y - height) < (rect.y - rect.height);
  }

  public int getHeight() {
    return height;
  }

  public int width() {
    return width;
  }

  public int getX() {
    return x;
  }

  public int getY() {
    return y;
  }

  public String toString() {
    return "Rectangle [x=" + x + ", y=" + y + ", width=" + width + ", height=" + height;
  }

}

   
   
   
   
